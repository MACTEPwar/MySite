// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySite.Data;

namespace MySite.Migrations
{
    [DbContext(typeof(DbProductsAndGroupsContext))]
    [Migration("20190124223650_v3.1")]
    partial class v31
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MySite.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discription");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("MySite.Models.GropsAndProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GroupId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProductId");

                    b.ToTable("gropsAndProducts");
                });

            modelBuilder.Entity("MySite.Models.Groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Discription")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("MySite.Models.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImageName");

                    b.Property<int>("ImageSize");

                    b.Property<string>("ImageType");

                    b.Property<int>("ProductId");

                    b.Property<int?>("ProductsId");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MySite.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<int>("Discount");

                    b.Property<string>("Discription");

                    b.Property<int>("Price");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Unit")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("MySite.Models.GropsAndProducts", b =>
                {
                    b.HasOne("MySite.Models.Groups", "Groups")
                        .WithMany("groupAndProducts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MySite.Models.Products", "Products")
                        .WithMany("groupAndProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MySite.Models.Groups", b =>
                {
                    b.HasOne("MySite.Models.Category", "Category")
                        .WithMany("Groups")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MySite.Models.Images", b =>
                {
                    b.HasOne("MySite.Models.Products", "Products")
                        .WithMany("Images")
                        .HasForeignKey("ProductsId");
                });
#pragma warning restore 612, 618
        }
    }
}
